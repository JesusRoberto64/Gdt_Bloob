[gd_scene load_steps=33 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Art/Mat&Sahders/Basic_shadermaterial.tres" type="Material" id=2]
[ext_resource path="res://Art/Mat&Sahders/Funtain_MAt.tres" type="Material" id=3]
[ext_resource path="res://Art/Mat&Sahders/glow_Anim_Mat.tres" type="Material" id=4]
[ext_resource path="res://Scripts/Contoles & UI/Tester_Shader.gd" type="Script" id=5]
[ext_resource path="res://Art/Mat&Sahders/Teste_bg.tres" type="Material" id=6]
[ext_resource path="res://Art/Mat&Sahders/Hazard_ShaderMat.tres" type="Material" id=7]
[ext_resource path="res://Art/Mat&Sahders/Gaussian_sahderMat.tres" type="Material" id=8]
[ext_resource path="res://Art/Mat&Sahders/asteropp_shaderMat.tres" type="Material" id=9]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float PI = 3.14159265359;

float plot(vec2 st,float pct){
	//return smoothstep(0.02,0.0,abs(st.x - st.y)) ;
	return smoothstep(pct-0.02,pct,st.y) - smoothstep(pct,pct+0.02,st.y);
}

void fragment() {
	//COLOR = vec4(UV,0.5,1.0);
	//vec2 st = FRAGCOORD.xy *SCREEN_PIXEL_SIZE;
	vec2 st = UV;
	//float y = st.x; // Interpolaation 
	//float y = pow(st.x,4.0); //Exponetial growth 
	//float y = sqrt(st.x); // low curve
	//float y = step(0.5,st.x); // black and white
	float y = smoothstep(0.1,1.0,st.x); // smooth trasition 
	
	vec3 color = vec3(y);
	
	float pct = plot(st,y);
	color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);
	
	COLOR = vec4(color,1.0);
	//COLOR.a = color.r;
	
}

void vertex() {
	 //VERTEX += vec2(10.0, 0.0);
	//VERTEX += vec2(cos(TIME)*10.0, sin(TIME)*10.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

void fragment(){
	COLOR = vec4(0.0,0.0,0.0,0.5); 
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;


void fragment(){
	float rest = length(UV-0.5);
	
	COLOR = vec4(vec3(1.0),rest);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;
//render_mode skip_vertex_transform;
varying vec2 v_uv;
varying vec2 v_position;

void fragment(){
	//vec2 st = UV;
	//float y = smoothstep(0.1,1.0,st.x);
	//vec3 color = vec3(y);
	//vec3 color = vec3(v_uv.x,v_uv.y,0.0);
	vec3 color = vec3(0.0);
	//color.r = step(0.0,v_position.x );
	//color.g = step(0.0,v_position.y );
	//color.r = smoothstep(0.45,0.7,v_uv.x);
	//color.g = smoothstep(0.45,0.7,v_uv.y);
	//color.r = 20.0/length(v_position.xy - 0.5);
	//color.g = 20.0/length(v_position.xy - 0.5);
	//color.g = 0.1/length(v_uv.xy - 0.5);
	//if (color.r < 1.0){
		//color.rgb = vec3(0.0);
	//}
	float inCircle = 1.0 - step(0.4,length(v_uv -0.5));
	color = vec3(1.0,1.0,0.0) * inCircle;
	COLOR = vec4(color,1.0);
	//COLOR = vec4(mix(vec3(1.0,0.0,1.0),vec3(0.0,0.0,1.0),UV.y),1.0);
	//COLOR = vec4(vec3(v_position.x,v_position.y,0.0),1.0);
	
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
	//VERTEX = 
	//POSITION;
	
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform sampler2D text;
varying vec2 v_uv; 
varying vec2 v_position;

// pt es el vertex mapeado en los vectores de la imagen VERTEX = (-1.0,-1.0)
// has el vector posritivo de VERTEX = (1.0,1.0), 
//el centro simpre sera  vec2(0.0)

float rect(vec2 pt,vec2 anchor,vec2 size, vec2 center){
	vec2 p = pt - center; 
	vec2 halfsize = size * 0.5;
	float horz = step(-halfsize.x - anchor.x, p.x) - step(halfsize.x - anchor.x,p.x);
	float vert = step(-halfsize.y - anchor.y, p.y) - step(halfsize.y - anchor.y,p.y);
	
	return horz * vert;
}

mat2 getRotationMatrix(float theta){
	// el valor de theta puede see PI para dar rotaciones y revoluciones mas 
	// precisas 
	float s = sin(theta);
	float c = cos(theta);
	return mat2(vec2(c,-s),vec2(s,c)); 
}

mat2 getScalarMatrix(float scale){
	return mat2(vec2(scale,0.0),vec2(0.0, scale));
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}

void fragment(){
	//puting the texure
	
	//COLOR = texture(text,v_uv );
	//COLOR = vec4(vec3(v_uv.x,v_uv.y,0.0),0.0);
	
	//the scuare 
	
	float radius = 16.5;
	//=====traslacion
	//vec2 center = vec2(cos(TIME*2.0)*radius,sin(TIME*2.0)*radius);
	//float inRect = rect(v_position,vec2(19.0),center);
	
	//=======RotaciÃ³n
	
	vec2 centerG = vec2(0.0,0.0);
	mat2 matr = getRotationMatrix(TIME);
	
	// escla de la figura 
	mat2 mats = getScalarMatrix((sin(TIME)+1.0)/ 1.0 + 0.8);
	// moving ceter point Tralacion alredor de un punto 
	vec2 pt = matr * v_position;
	//dejando el centro en medio de la figura y escalado 
	vec2 ptC = (mats * matr * (v_position-centerG)) + centerG;
	
	float inRectG = rect(ptC,vec2(16.0),vec2(32.0),centerG);
	//vec3 color = vec3(1.0,1.0,0.0) * inRect + vec3(0.0,1.0,0.0) * inRectG;
	vec3 color = vec3(0.0,1.0,0.0) * inRectG;
	COLOR = vec4(color,1.0);
	
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/text = ExtResource( 1 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

varying vec2 v_uv; 
varying vec2 v_position;

float rect(vec2 pt,vec2 size, vec2 center){
	vec2 p = pt - center; 
	vec2 halfsize = size * 0.5;
	float horz = step(-halfsize.x , p.x) - step(halfsize.x ,p.x);
	float vert = step(-halfsize.y , p.y) - step(halfsize.y,p.y);
	
	return horz * vert;
}

mat2 getRotationMatrix(float theta){
	// el valor de theta puede see PI para dar rotaciones y revoluciones mas 
	// precisas 
	float s = sin(theta);
	float c = cos(theta);
	return mat2(vec2(c,-s),vec2(s,c)); 
}

mat2 getScalarMatrix(float scale){
	return mat2(vec2(scale,0.0),vec2(0.0, scale));
}

void fragment(){
	
	float tilecount = 2.0;
	vec2 center = vec2(0.5);
	mat2 mat = getRotationMatrix(TIME);
	vec2 p = fract(v_uv * tilecount);
	vec2 pt = (mat * (p-center)) + center;
		
	float inRect = rect(pt,vec2(0.5),center);
	vec3 color = vec3(1.0,1.0,0.0) * inRect;
	
	COLOR = vec4(color,1.0);
}


void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}
"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

varying vec2 v_uv; 
varying vec2 v_position;


float circle(vec2 pt,vec2 center, float radius, bool softeen){
	vec2 p = pt - center;
	float edge = (softeen) ? radius * 0.005 : 0.0;
	return 1.0 - smoothstep(radius-edge,radius + edge, length(p));
	
}

float linedcircle(vec2 pt,vec2 center, float radius, float line_width, bool soften){
	vec2 p = pt - center;
	float len = length(p);
	float edge = (soften)? radius *0.8 : 0.0;
	float half_line_width  = line_width /2.0;
	
	return smoothstep(radius-half_line_width-edge,radius-half_line_width, len) 
	- smoothstep(radius+half_line_width,radius+half_line_width+edge,length(p));
}

void fragment(){
	
	//vec3 color = vec3(1.0,0.0,0.0) * circle(v_position,vec2(16.5,-16.5),10.0,true);
	vec3 color = vec3(1.0,0.0,0.0) * linedcircle(v_position,vec2(0.0),10.0,1.0,true);
	COLOR = vec4(color,color.r);
	
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;
const float PI =  3.14159265359;
const float TWO_PI = 6.28318530718;

varying vec2 v_uv; 
varying vec2 v_position;

void fragment(){
	vec3 color = vec3(0.0);
	float d = 0.0;
	vec2 st = UV;
	
	st = st*2.800 - 1.0;
	
	int N = 3;
	
	float a = atan(st.x,st.y)+PI;
	float r = TWO_PI/float(N);
	
	d = cos(floor(0.1+a/r)*r-a)*length(st);
	color = vec3(1.0-step(0.1,d));
	COLOR = vec4(color,1.0);
	
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}

"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;

varying vec2 v_uv; 
varying vec2 v_position;

const float PI = 3.14159265359;
const float PI2 = 6.28318530718;

float Draw_line(float a, float b, float line_width, float edge_thickness){
	float half_line_width = line_width / 2.0;
	
	return smoothstep(a-half_line_width-edge_thickness,a-half_line_width,b)
	- smoothstep(a+half_line_width, a+half_line_width+edge_thickness,b);
}

void fragment(){
	
	//vec3 color = vec3(1.0) * Draw_line(v_position.y,sin(v_position.x*3.1416),0.2,0.001);
	//========================
	// * PI : para reducir la logitud (mas ancha) ==sin(uv.x* PI )==
	
	// + float : es para mover la onda en el eje Y == sin(uv.x* PI ) + 1.0===
	
	// / float : es para aumentar la Aplitud (mas alta)  == (sin(uv.x* PI ) + 1.0) / 2 ==
	
	//   mix : es para loquear los valores en el rango 0.1 y 0.9 
	//  y NO sea NEGATIVO el valor == mix(0.1,0.9,sin(v_uv.x*PI2)+1.0)/2.0 ==
	
	// + TIME es para deplazar la onda en eje x == sin(v_uv.x*PI2 + TIME) ==
	 
	vec3 color = vec3(1.0) * Draw_line(v_uv.y,mix(0.1,0.9,
	sin(v_uv.x*PI2*4.0 + TIME)+1.1)/2.0,0.01,0.01);
	COLOR = vec4(color,color.r);
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}
"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item; 

varying vec2 v_uv; 
varying vec2 v_position;

const float PI = 3.14159265359;
const float PI2 = 6.28318530718;

float Draw_line(float a, float b, float line_width, float edge_thickness){
	float half_line_width = line_width / 2.0;
	
	return smoothstep(a-half_line_width-edge_thickness,a-half_line_width,b)
	- smoothstep(a+half_line_width, a+half_line_width+edge_thickness,b);
}

float linedcircle(vec2 pt,vec2 center, float radius, float line_width, bool soften){
	vec2 p = pt - center;
	float len = length(p);
	float edge = (soften)? radius *0.005 : 0.0;
	float half_line_width  = line_width /2.0;
	
	return smoothstep(radius-half_line_width-edge,radius-half_line_width, len) 
	- smoothstep(radius+half_line_width,radius+half_line_width+edge,length(p));
	
}

float sweep(vec2 pt, vec2 center, float radius, float line_width, float edge_thikness,
 float time){
	vec2 d = pt - center; // el centro 
	float theta = time * 2.0;
	vec2 p = vec2(cos(theta), sin(theta)) * radius; // es el perimetro dibujado 
	float h = clamp(dot(d,p)/dot(p,p),0.0,1.0);
	//float h = dot(d,p)/dot(p,p);
	float l = length(d - p*h);
	
	float gradient = 0.0;
	const float gradient_angle = PI * 0.3;
	
	if (length(d)<radius){
		float angle = mod(theta - atan(d.y, d.x), PI2);
		gradient = clamp(gradient_angle - angle, 0.0, gradient_angle)/gradient_angle * 0.5;
	}
	
	return gradient + 1.0 - smoothstep(line_width, line_width+edge_thikness, l);
	
}

void fragment(){
	vec3 axis_color = vec3(0.8);
	vec3 color =  Draw_line(v_uv.y,0.5,0.01,0.001) * axis_color;
	color +=  Draw_line(v_uv.x,0.5,0.01,0.001) * axis_color;
	color += linedcircle(v_uv,vec2(0.5),0.4,0.01,true);
	color += linedcircle(v_uv,vec2(0.5),0.2,0.01,true);
	color += linedcircle(v_uv,vec2(0.5),0.05,0.01,true);
	color += sweep(v_uv,vec2(0.5),0.4,0.01,0.001,TIME) * vec3(0.1,0.2,1.0);
	
	COLOR = vec4(color,1.0);
}

void vertex(){
	v_uv = UV;
	v_position = VERTEX ;
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )

[sub_resource type="QuadMesh" id=21]

[sub_resource type="Shader" id=22]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D normalmap;
varying vec2 text_position;

varying vec2 v_uv;
varying vec3 v_position;


void vertex(){
	text_position = -0.25/VERTEX.xy + 0.5;
	v_uv = UV;
	v_position = VERTEX +0.0;
	//v_position = POSITION;
	//POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(vec3(POSITION.xyz),1.0);
	//POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX,1.0);
}

void fragment(){
	
	//ALBEDO = texture(normalmap,text_position).xyz;
	
	//ALBEDO -= 0.19;
	
	//ALBEDO = vec3(v_uv.x,v_uv.y,0.0);
	vec3 color = vec3(0.0);
	//color.r = clamp(v_position.x,0.0,1.0);
	//color.g = clamp(v_position.y,0.0,1.0);
	color.r = step(0.0,v_position.x);
	color.g = step(0.0,v_position.y);
	
	ALBEDO = color;
	//ALBEDO *= 2.5;
}"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )
shader_param/normalmap = ExtResource( 1 )

[node name="Shaders_test" type="Node2D"]
self_modulate = Color( 0.572549, 0.713726, 0.756863, 1 )
script = ExtResource( 5 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -1

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = ExtResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Gaussian" type="Sprite" parent="CanvasLayer"]
material = ExtResource( 8 )
position = Vector2( 512.13, 299.683 )
scale = Vector2( 15.8827, 9.33573 )
texture = ExtResource( 1 )

[node name="Basic glow" type="Sprite" parent="."]
self_modulate = Color( 0.572549, 0.713726, 0.756863, 1 )
material = ExtResource( 2 )
position = Vector2( 35.3026, 42.5154 )
texture = ExtResource( 1 )
__meta__ = {
"_editor_description_": ""
}

[node name="Sprite lines" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 510.738, 224.269 )
texture = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 99.9842, 56.6765 )
texture = ExtResource( 1 )

[node name="Glow ligth" type="Sprite" parent="."]
self_modulate = Color( 0.54902, 0.756863, 0.890196, 1 )
material = ExtResource( 4 )
position = Vector2( 151.189, 98.3963 )
texture = ExtResource( 1 )

[node name="Glow ligth2" type="Sprite" parent="Glow ligth"]
self_modulate = Color( 0.54902, 0.756863, 0.890196, 1 )
material = ExtResource( 4 )
position = Vector2( 147.964, -52.5704 )
scale = Vector2( 1.28249, 1.28249 )
texture = ExtResource( 1 )

[node name="ball basic" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 230.696, 98.6023 )
texture = ExtResource( 1 )

[node name="Bubbles" type="Sprite" parent="."]
self_modulate = Color( 0.658824, 0.85098, 0.968627, 1 )
material = ExtResource( 3 )
position = Vector2( 59.252, 153.632 )
texture = ExtResource( 1 )

[node name="Circle " type="Sprite" parent="."]
material = SubResource( 8 )
position = Vector2( 330.506, 130.279 )
texture = ExtResource( 1 )

[node name="Test new" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 425.676, 128.724 )
texture = ExtResource( 1 )

[node name="tile" type="Sprite" parent="."]
material = SubResource( 12 )
position = Vector2( 198.362, 194.075 )
texture = ExtResource( 1 )

[node name="Circles" type="Sprite" parent="."]
material = SubResource( 14 )
position = Vector2( 374.737, 301.499 )
texture = ExtResource( 1 )

[node name="Star" type="Sprite" parent="."]
material = SubResource( 16 )
position = Vector2( 70.4204, 234.931 )
texture = ExtResource( 1 )

[node name="Curves Lines" type="Sprite" parent="."]
material = SubResource( 18 )
position = Vector2( 421.797, 222 )
texture = ExtResource( 1 )

[node name="Lines conbined" type="Sprite" parent="."]
material = SubResource( 20 )
position = Vector2( 594.863, 225.77 )
texture = ExtResource( 1 )

[node name="Polygon" type="Sprite" parent="."]
self_modulate = Color( 0.905882, 0.8, 0.8, 1 )
material = ExtResource( 7 )
position = Vector2( 191.354, 279.453 )
texture = ExtResource( 1 )

[node name="astero++" type="Sprite" parent="."]
self_modulate = Color( 0.588235, 1, 0.403922, 1 )
material = ExtResource( 9 )
position = Vector2( 473.505, 331.783 )
texture = ExtResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.999758, -0.0220116, 0, 0.0220116, 0.999758, 0, 0.508164, 0 )
mesh = SubResource( 21 )
material/0 = SubResource( 23 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.491833, 1.03422 )
projection = 1
size = 1.04035
