[gd_scene load_steps=22 format=2]

[ext_resource path="res://Scripts/Blob 2.0 Scr/Planc_P1.gd" type="Script" id=1]
[ext_resource path="res://Scripts/Blob 2.0 Scr/Camera2D.gd" type="Script" id=2]
[ext_resource path="res://Scripts/Blob 2.0 Scr/Movement.gd" type="Script" id=3]
[ext_resource path="res://Scripts/Blob 2.0 Scr/Graphics.gd" type="Script" id=4]
[ext_resource path="res://Art/UI & Menus/Fonts/bahnschrift.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://Scripts/Contoles & UI/Health_HUD.gd" type="Script" id=6]
[ext_resource path="res://icon.png" type="Texture" id=7]
[ext_resource path="res://Art/Mat&Sahders/hurt_shaderMAt.tres" type="Material" id=8]
[ext_resource path="res://Art/Mat&Sahders/Glow_Circle.tscn" type="PackedScene" id=9]
[ext_resource path="res://Levels/Demo/Cam_anim/LevelsIntro_Demo.tres" type="Animation" id=10]

[sub_resource type="Curve2D" id=1]
_data = {
"points": PoolVector2Array(  )
}

[sub_resource type="Animation" id=2]
resource_name = "Normal"
length = 4.0
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:zoom:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0.2, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0.5, 4 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:zoom:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0.2, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0.5, 4 )
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 3.8 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "cinematic_off"
} ]
}

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec3 body_color = vec3(1,0.10,0.0);
uniform float volume = 15.0;
uniform float u_time = 0.5; 

//new shader integration 
uniform vec3 back_color = vec3(1.0,0.0,0.0);

float central_noise(vec2 coord) {
	vec2 diff = coord - vec2(0.5);
	return sqrt(diff.x * diff.x + diff.y * diff.y); 
	}

vec2 rand2( vec2 coord) {
	coord = mod(coord, 10000.0);
	return fract(sin( vec2( dot(coord,vec2(127.1,311.7)), dot(coord,vec2(269.5,183.3)) ) ) * 43758.5453);
}

float celular_noise(vec2 coord, float time) {
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	float min_dist = 99999.0;
	// going through the current tile and the tiles surrounding it
	for(float x = -25.0; x <= 1.0; x++) {
		for(float y = -5.0; y <= 5.0; y++) {
			
			// generate a random point in each tile,
			// but also account for whether it's a farther, neighbouring tile
			vec2 node = rand2(i + vec2(x, y)) + vec2(x, y);
			
			node = 0.5 + 0.5*sin(time + 6.2831*node);
			// check for distance to the point in that tile
			// decide whether it's the minimum
			float dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);
			min_dist = min(min_dist, dist);
		}
	}
	return min_dist;
	}

void fragment() {
	
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec4 text =  texture(TEXTURE,UV);
	
	if (color.rgb != back_color)discard;
	color.a = 0.0;
	vec2 coord = UV * 1.0; //* volume;
	float value = central_noise(coord);
	float val = celular_noise(coord,TIME*u_time);
	
	vec2 s_coord = UV* 1.0;
	float sphere = central_noise(s_coord);
	
	vec2 c_coord = UV;
	float cell = celular_noise(c_coord,TIME*u_time);
	
	float final = mix(sphere*10.0,cell*10.0,1.4); // ponee 1.5 para efecto si querido
	COLOR = vec4(body_color,final);
	
	if (COLOR.a == 0.0){
		COLOR.a = 1.0;
	}
	
	//COLOR  = vec4(body_color,val*15.0);
	//COLOR = vec4(body_color,value*4.5);
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/body_color = Vector3( 0.25, 0.58, 0.58 )
shader_param/volume = 15.0
shader_param/u_time = 0.5
shader_param/back_color = Vector3( 1, 0, 0 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec3 color = vec3(0.5,1.0,1.0);

float celular_noise(vec2 coord) {
	vec2 diff = coord - vec2(0.5);
	return sqrt( diff.y * diff.y * diff.y * diff.y); 
	}

void fragment() {
	
	vec2 coord = UV * 1.0;
	float value = celular_noise(coord);
	COLOR  = vec4(color,value);
	
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/color = Vector3( 0.5, 1, 1 )

[sub_resource type="Animation" id=7]
tracks/0/type = "value"
tracks/0/path = NodePath("Glow_Circle:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.7, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.603922, 0.929412, 0.964706, 0 ), Color( 0.603922, 0.929412, 0.964706, 1 ), Color( 0.603922, 0.929412, 0.964706, 1 ), Color( 0.603922, 0.929412, 0.964706, 0 ) ]
}

[sub_resource type="DynamicFont" id=8]
size = 22
outline_size = 1
outline_color = Color( 0.0352941, 0.0235294, 0.0235294, 1 )
font_data = ExtResource( 5 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform float intence = 0.0;

float random (in vec2 st) {
    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);
}

float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve.  Same as SmoothStep()
    vec2 u = f*f*(3.0-2.0*f);
    // u = smoothstep(0.,1.,f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

float central_noise(vec2 coord) {
	vec2 diff = coord - vec2(0.5);
	return sqrt( diff.x* diff.x  + diff.y * diff.y ); 
	}
	

void fragment(){
	vec2 uv_coord = UV *1.0;
	float value = central_noise(uv_coord);
	
	float noise_val = noise(FRAGCOORD.xy*0.1);
	
	COLOR.a = value*intence; // max value 2.2
	//COLOR.a = noise_val;
	COLOR.a = mix(value*intence,noise_val*2.0,0.02);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/intence = 2.0

[sub_resource type="CircleShape2D" id=11]
radius = 20.0

[node name="Planc_P1" type="Node2D"]
script = ExtResource( 1 )
curve = SubResource( 1 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.2, 0.2 )
process_mode = 0
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = true
script = ExtResource( 2 )

[node name="Timer" type="Timer" parent="Camera2D"]
one_shot = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera2D"]
autoplay = "Normal"
anims/LevelsIntro_Demo = ExtResource( 10 )
anims/Normal = SubResource( 2 )

[node name="Movement" type="Node2D" parent="."]
script = ExtResource( 3 )

[node name="Graphics" type="Node2D" parent="."]
script = ExtResource( 4 )

[node name="Glow_Circle" parent="Graphics" instance=ExtResource( 9 )]

[node name="Polygon2D" type="Polygon2D" parent="Graphics"]
color = Color( 0, 1, 0, 1 )

[node name="Sprite" type="Sprite" parent="Graphics"]
material = SubResource( 4 )
scale = Vector2( 5.5, 5.5 )
texture = ExtResource( 7 )

[node name="Line2D" type="Line2D" parent="Graphics"]
material = SubResource( 6 )
z_index = -1
default_color = Color( 0.4, 0.501961, 1, 0.192157 )
texture_mode = 2

[node name="Particles" type="Node2D" parent="Graphics"]
z_index = -2

[node name="AnimationPlayer" type="AnimationPlayer" parent="Graphics"]
playback_default_blend_time = 0.8
anims/glow = SubResource( 7 )

[node name="StateTimer" type="Timer" parent="."]
wait_time = 0.5

[node name="Turbo" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 2

[node name="Health_HUD" type="Label" parent="CanvasLayer"]
modulate = Color( 1, 1, 1, 0.635294 )
margin_left = 49.0
margin_top = 149.0
margin_right = 145.0
margin_bottom = 178.0
custom_fonts/font = SubResource( 8 )
text = "Health: "
script = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="grafic_health" type="Position2D" parent="CanvasLayer/Health_HUD"]
position = Vector2( 41, -69 )

[node name="HurtRect" type="ColorRect" parent="CanvasLayer"]
visible = false
material = ExtResource( 8 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 1, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HurtRect2" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
anchor_right = 1.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Area2D" type="KinematicBody2D" parent="." groups=[
"Player",
]]
collision_layer = 32
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 11 )
[connection signal="timeout" from="Camera2D/Timer" to="Camera2D" method="_on_Timer_timeout"]
[connection signal="timeout" from="StateTimer" to="." method="_on_StateTimer_timeout"]
[connection signal="timeout" from="Turbo" to="." method="_on_Turbo_timeout"]
